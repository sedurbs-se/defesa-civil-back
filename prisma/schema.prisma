generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Municipio {
  id        String     @id @default(uuid())
  nome      String
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  deletedAt DateTime?
  desastres Desastre[]
}

model Desastre {
  id          String        @id @default(uuid())
  data        DateTime
  municipioId String        @map("municipio_id")
  municipio   Municipio     @relation(fields: [municipioId], references: [id])
  areas       AreaAfetada[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?
  finalizado  Boolean       @default(false)
}

model AreaAfetada {
  id                    String                @id @default(uuid())
  ORDEM                 Int
  nome                  String
  unidadesHabitacionais UnidadeHabitacional[]
  Desastre              Desastre?             @relation(fields: [desastreId], references: [id])
  desastreId            String?
  team                  Equipe[]
  Acao                  Acao[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  deletedAt             DateTime?
}

model UnidadeHabitacional {
  id            String        @id @default(uuid())
  ORDEM         Int
  endereco      String
  coordenadas   String
  areaAfetadaId String
  areaAfetada   AreaAfetada   @relation(fields: [areaAfetadaId], references: [id])
  fotos         FotoUnidade[]
  afetados      Afetado[]
  acoes         Acao[]
  fl_resistente Boolean
  fl_danificado Boolean
  fl_destroido  Boolean

  fl_resiliente  Boolean
  fl_desabrigado Boolean
  fl_desalojado  Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?
}

model Afetado {
  id                    String              @id @default(uuid())
  cpf                   String              @unique
  nome                  String
  contato               String
  sexo                  String
  idade                 Int
  fl_chefe_familia      Boolean
  unidadeHabitacionalId String
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  deletedAt             DateTime?
}

model Acao {
  id                    String               @id @default(uuid())
  tipoAcaoId            String
  tipo                  TipoAcao             @relation(fields: [tipoAcaoId], references: [id])
  unidadeHabitacionalId String?
  unidadeHabitacional   UnidadeHabitacional? @relation(fields: [unidadeHabitacionalId], references: [id])

  AreaAfetada   AreaAfetada? @relation(fields: [areaAfetadaId], references: [id])
  areaAfetadaId String?

  contexto String

  tarefas Tarefa[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Tarefa {
  id            String      @id @default(uuid())
  acaoId        String      @map("acao_id")
  acao          Acao        @relation(fields: [acaoId], references: [id])
  nome          String
  status        String
  quantificavel Boolean?
  itemBasicoId  String?
  itemBasico    ItemBasico? @relation(fields: [itemBasicoId], references: [id])

  eventos Evento[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model ItemBasico {
  id        String    @id @default(uuid())
  nome      String
  Tarefa    Tarefa[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Evento {
  id           String     @id @default(uuid())
  tarefaId     String     @map("tarefa_id")
  tarefa       Tarefa     @relation(fields: [tarefaId], references: [id])
  descricao    String
  tipoEventoId String
  tipoEvento   TipoEvento @relation(fields: [tipoEventoId], references: [id])
  fotoId       String?
  foto         Imagem?    @relation(fields: [fotoId], references: [id])
  quantidade   Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model TipoEvento {
  id        String    @id @default(uuid())
  nome      String
  Evento    Evento[]
  final     Boolean?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model TipoAcao {
  id        String    @id @default(uuid())
  nome      String
  Acao      Acao[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model FotoUnidade {
  id                    String              @id @default(uuid())
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])
  unidadeHabitacionalId String
  url                   String
  type                  String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  deletedAt             DateTime?
}

model Usuario {
  id         String      @id @default(uuid())
  cpf        String      @unique
  nome       String
  agente     Agente?
  cargo      String?
  alteracoes Alteracao[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  deletedAt  DateTime?
}

model Agente {
  id        String   @id @default(uuid())
  funcao    String
  contato   String
  usuarioId String   @unique @map("usuario_id")
  user      Usuario? @relation(fields: [usuarioId], references: [id])

  equipeAgente EquipeAgente[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  deletedAt    DateTime?
}

model Equipe {
  id            String         @id @default(uuid())
  nome          String
  areaAfetadaId String         @map("area_afetada_id")
  areaAfetada   AreaAfetada    @relation(fields: [areaAfetadaId], references: [id])
  equipeAgente  EquipeAgente[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  deletedAt     DateTime?
}

model EquipeAgente {
  agenteId        String
  agente          Agente    @relation(fields: [agenteId], references: [id])
  equipeId        String
  equipe          Equipe    @relation(fields: [equipeId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  fl_lider_equipe Boolean?

  @@id([agenteId, equipeId])
}

model Imagem {
  id        String    @id @default(uuid())
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Evento    Evento[]
  deletedAt DateTime?
}

model Alteracao {
  id        String  @id @default(uuid())
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  tipo      String // CREATE, UPDATE, DELETE
  tabela    String // Tabela que foi alterada
  // Toda modificações no sistema será feita com metodo SoftDelete (deletedAt)
  antigo_id String? // id do objeto antes da alteração
  novo_id   String? // id do objeto depois da alteração
  item_id   String? // id do objeto que foi alterado

  createdAt DateTime @default(now())
}
