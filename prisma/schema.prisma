generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Municipio {
  id        String     @id @default(uuid())
  nome      String
  desastres Desastre[]
}

model Desastre {
  id          String        @id @default(uuid())
  data        DateTime
  municipioId String        @map("municipio_id")
  municipio   Municipio     @relation(fields: [municipioId], references: [id])
  areas       AreaAfetada[]
}

model AreaAfetada {
  id                    String                @id @default(uuid())
  ORDEM                 Int                   @unique
  nome                  String
  unidadesHabitacionais UnidadeHabitacional[]
  Desastre              Desastre?             @relation(fields: [desastreId], references: [id])
  desastreId            String?
  team                  Equipe[]
}

model UnidadeHabitacional {
  id             String           @id @default(uuid())
  ORDEM          Int              @unique
  endereco       String
  coordenadas    String
  areaAfetadaId  String
  areaAfetada    AreaAfetada      @relation(fields: [areaAfetadaId], references: [id])
  fotos          FotoUnidade[]

  acoes          Acao[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  fl_sos        Boolean?
  dt_finalizado DateTime?

  qtd_familias     Int
  qtd_pessoas     Int
  qtd_idosos      Int
  qtd_criancas    Int
  qtd_adultos      Int
  qtd_adolescente Int
  qtd_homens      Int
  qtd_mulheres    Int

  fl_resistente  Boolean
  fl_danificado  Boolean
  fl_destroido   Boolean
  fl_resiliente  Boolean
  fl_desabrigado Boolean
  fl_desalojado  Boolean
}

model TipoAcao {
  id   String @id @default(uuid())
  nome String

  acoes Acao[]
}

model Acao {
  id String @id @default(uuid())

  tipoAcaoId            String
  tipoAcao              TipoAcao            @relation(fields: [tipoAcaoId], references: [id])
  unidadeHabitacionalId String
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])

  afetado_cpf     String
  afetado_contato String
  afetado_nome    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FotoUnidade {
  id                    String              @id @default(uuid())
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])
  unidadeHabitacionalId String
  url                   String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Usuario {
  id     String  @id @default(uuid())
  cpf    String  @unique
  nome   String
  agente Agente?
}

model Agente {
  id        String   @id @default(uuid())
  funcao    String
  contato   String
  usuarioId String   @unique @map("usuario_id")
  user      Usuario? @relation(fields: [usuarioId], references: [id])

  equipeAgente    EquipeAgente[]
}

model Equipe {
  id            String         @id @default(uuid())
  nome          String
  funcao        String
  contato       String
  areaAfetadaId String         @map("area_afetada_id")
  areaAfetada   AreaAfetada    @relation(fields: [areaAfetadaId], references: [id])
  equipeAgente  EquipeAgente[]
}

model EquipeAgente {
  agenteId  String
  agente    Agente   @relation(fields: [agenteId], references: [id])
  equipeId  String
  equipe    Equipe   @relation(fields: [equipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fl_lider_equipe Boolean?

  @@id([agenteId, equipeId])
}
