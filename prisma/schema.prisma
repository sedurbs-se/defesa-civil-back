generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Municipio {
  id        String     @id @default(uuid())
  nome      String
  desastres Desastre[]
}

model Desastre {
  id          String        @id @default(uuid())
  data        DateTime
  municipioId String        @map("municipio_id")
  municipio   Municipio     @relation(fields: [municipioId], references: [id])
  areas       AreaAfetada[]
}

model AreaAfetada {
  id                    String                @id @default(uuid())
  ORDEM                 Int
  nome                  String
  unidadesHabitacionais UnidadeHabitacional[]
  Desastre              Desastre?             @relation(fields: [desastreId], references: [id])
  desastreId            String?
  team                  Equipe[]
  Acao                  Acao[]
}

model UnidadeHabitacional {
  id            String        @id @default(uuid())
  ORDEM         Int
  endereco      String
  coordenadas   String
  areaAfetadaId String
  areaAfetada   AreaAfetada   @relation(fields: [areaAfetadaId], references: [id])
  fotos         FotoUnidade[]
  afetados   Afetado[]
  acoes     Acao[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Afetado {
  id      String @id @default(uuid())
  cpf     String @unique
  nome    String
  contato String
  sexo    String
  idade   Int
  fl_chefe_familia Boolean
  unidadeHabitacionalId String
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])
}

model Acao {
  id                    String               @id @default(uuid())
  tipoAcaoId            String
  tipo                  TipoAcao             @relation(fields: [tipoAcaoId], references: [id])
  unidadeHabitacionalId String?
  unidadeHabitacional   UnidadeHabitacional? @relation(fields: [unidadeHabitacionalId], references: [id])

  AreaAfetada   AreaAfetada? @relation(fields: [areaAfetadaId], references: [id])
  areaAfetadaId String?

  contexto String

  tarefas Tarefa[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tarefa {
  id            String      @id @default(uuid())
  acaoId        String      @map("acao_id")
  acao          Acao        @relation(fields: [acaoId], references: [id])
  nome          String
  status        String
  quantificavel Boolean?
  itemBasicoId  String?
  itemBasico    ItemBasico? @relation(fields: [itemBasicoId], references: [id])

  eventos Evento[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ItemBasico {
  id     String   @id @default(uuid())
  nome   String
  Tarefa Tarefa[]
}

model Evento {
  id           String     @id @default(uuid())
  tarefaId     String     @map("tarefa_id")
  tarefa       Tarefa     @relation(fields: [tarefaId], references: [id])
  descricao    String
  tipoEventoId String
  tipoEvento   TipoEvento @relation(fields: [tipoEventoId], references: [id])
  fotoId       String?
  foto         Imagem?    @relation(fields: [fotoId], references: [id])
  quantidade   Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model TipoEvento {
  id     String   @id @default(uuid())
  nome   String
  Evento Evento[]
  final  Boolean?
}

model TipoAcao {
  id   String @id @default(uuid())
  nome String
  Acao Acao[]
}

model FotoUnidade {
  id                    String              @id @default(uuid())
  unidadeHabitacional   UnidadeHabitacional @relation(fields: [unidadeHabitacionalId], references: [id])
  unidadeHabitacionalId String
  url                   String
  type                  String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Usuario {
  id     String  @id @default(uuid())
  cpf    String  @unique
  nome   String
  agente Agente?
  cargo  String?
}

model Agente {
  id        String   @id @default(uuid())
  funcao    String
  contato   String
  usuarioId String   @unique @map("usuario_id")
  user      Usuario? @relation(fields: [usuarioId], references: [id])

  equipeAgente EquipeAgente[]
}

model Equipe {
  id            String         @id @default(uuid())
  nome          String
  areaAfetadaId String         @map("area_afetada_id")
  areaAfetada   AreaAfetada    @relation(fields: [areaAfetadaId], references: [id])
  equipeAgente  EquipeAgente[]
}

model EquipeAgente {
  agenteId        String
  agente          Agente   @relation(fields: [agenteId], references: [id])
  equipeId        String
  equipe          Equipe   @relation(fields: [equipeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  fl_lider_equipe Boolean?

  @@id([agenteId, equipeId])
}

model Imagem {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Evento    Evento[]
}
